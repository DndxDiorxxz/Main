local select = select
local pcall, getgenv, next, Vector2, mathclamp, type, mousemoverel = select(1, pcall, getgenv, next, Vector2.new, math.clamp, type, mousemoverel or (Input and Input.MouseMove))

-- Clean exit if already running
pcall(function()
    if getgenv().Aimbot and getgenv().Aimbot.Functions then
        getgenv().Aimbot.Functions:Exit()
    end
end)

getgenv().Aimbot = {}
local Environment = getgenv().Aimbot

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

Environment.Settings = {
    Enabled = true,
    TeamCheck = false,
    AliveCheck = true,
    WallCheck = false,
    Sensitivity = 0,
    ThirdPerson = false,
    ThirdPersonSensitivity = 3,
    TriggerKey = "Q",
    Toggle = true,
    LockPart = "Head",
    PredictionVelocity = 0.120,
    Smoothness = 0.3
}

Environment.FOVSettings = {
    Enabled = true,
    Visible = false,
    Amount = 200,
    Color = Color3.fromRGB(255, 255, 255),
    LockedColor = Color3.fromRGB(255, 70, 70),
    Transparency = 0.5,
    Sides = 60,
    Thickness = 3,
    Filled = false
}

Environment.FOVCircle = Drawing.new("Circle")

local function CancelLock()
    Environment.Locked = nil
    Environment.LockedPart = nil
    Environment.FOVCircle.Color = Environment.FOVSettings.Color
end

local function FindPartInCharacter(character, partName)
    -- Try direct search first
    local part = character:FindFirstChild(partName)
    if part then return part end
    
    -- Try case-insensitive search for any BasePart
    for _, child in ipairs(character:GetChildren()) do
        if child:IsA("BasePart") and child.Name:lower() == partName:lower() then
            return child
        end
    end
    
    return nil
end

local function GetTargetPart(character)
    -- Always try to use the configured LockPart first
    local targetPart = FindPartInCharacter(character, Environment.Settings.LockPart)
    
    -- If not found, try common alternatives
    if not targetPart then
        local potentialParts = {"Head", "HumanoidRootPart", "UpperTorso", "Torso"}
        for _, partName in ipairs(potentialParts) do
            targetPart = FindPartInCharacter(character, partName)
            if targetPart then break end
        end
    end
    
    return targetPart
end

local function GetClosestPlayer()
    if not Environment.Locked then
        RequiredDistance = Environment.FOVSettings.Enabled and Environment.FOVSettings.Amount or 2000

        for _, v in ipairs(Players:GetPlayers()) do
            if v ~= LocalPlayer and v.Character then
                local humanoid = v.Character:FindFirstChildOfClass("Humanoid")
                if not humanoid or humanoid.Health <= 0 then continue end
                
                if Environment.Settings.TeamCheck and v.Team == LocalPlayer.Team then continue end
                
                local targetPart = GetTargetPart(v.Character)
                if not targetPart then continue end
                
                if Environment.Settings.WallCheck then
                    local ignoreList = {v.Character, LocalPlayer.Character, Camera}
                    local obscuringParts = Camera:GetPartsObscuringTarget({targetPart.Position}, ignoreList)
                    if #obscuringParts > 0 then continue end
                end

                local Vector, OnScreen = Camera:WorldToViewportPoint(targetPart.Position)
                if not OnScreen then continue end
                
                local mousePos = Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                local targetPos = Vector2(Vector.X, Vector.Y)
                local Distance = (mousePos - targetPos).Magnitude

                if Distance < RequiredDistance then
                    RequiredDistance = Distance
                    Environment.Locked = v
                    Environment.LockedPart = targetPart
                end
            end
        end
    elseif Environment.Locked and Environment.Locked.Character and Environment.LockedPart then
        if not Environment.LockedPart.Parent then
            CancelLock()
            return
        end
        
        local Vector = Camera:WorldToViewportPoint(Environment.LockedPart.Position)
        local mousePos = Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
        local targetPos = Vector2(Vector.X, Vector.Y)
        
        if (mousePos - targetPos).Magnitude > RequiredDistance then
            CancelLock()
        end
    else
        CancelLock()
    end
end

ServiceConnections = {}
ServiceConnections.TypingStartedConnection = UserInputService.TextBoxFocused:Connect(function()
    Typing = true
end)

ServiceConnections.TypingEndedConnection = UserInputService.TextBoxFocusReleased:Connect(function()
    Typing = false
end)

local function Load()
    ServiceConnections.RenderSteppedConnection = RunService.RenderStepped:Connect(function()
        if Environment.FOVSettings.Enabled and Environment.Settings.Enabled then
            Environment.FOVCircle.Radius = Environment.FOVSettings.Amount
            Environment.FOVCircle.Thickness = Environment.FOVSettings.Thickness
            Environment.FOVCircle.Filled = Environment.FOVSettings.Filled
            Environment.FOVCircle.NumSides = Environment.FOVSettings.Sides
            Environment.FOVCircle.Color = Environment.FOVSettings.Color
            Environment.FOVCircle.Transparency = Environment.FOVSettings.Transparency
            Environment.FOVCircle.Visible = Environment.FOVSettings.Visible
            Environment.FOVCircle.Position = Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
        else
            Environment.FOVCircle.Visible = false
        end

        if Running and Environment.Settings.Enabled then
            GetClosestPlayer()

            if Environment.Locked and Environment.Locked.Character and Environment.LockedPart then
                local humanoid = Environment.Locked.Character:FindFirstChildOfClass("Humanoid")
                
                if not humanoid or (Environment.Settings.AliveCheck and humanoid.Health <= 0) then
                    CancelLock()
                    return
                end
                
                if not Environment.LockedPart.Parent then
                    CancelLock()
                    return
                end
                
                local velocity = Environment.LockedPart.Velocity * Environment.Settings.PredictionVelocity
                local predictedPosition = Environment.LockedPart.Position + velocity

                if Environment.Settings.ThirdPerson then
                    Environment.Settings.ThirdPersonSensitivity = mathclamp(Environment.Settings.ThirdPersonSensitivity, 0.1, 5)
                    local Vector = Camera:WorldToViewportPoint(predictedPosition)
                    mousemoverel(
                        (Vector.X - UserInputService:GetMouseLocation().X) * Environment.Settings.ThirdPersonSensitivity,
                        (Vector.Y - UserInputService:GetMouseLocation().Y) * Environment.Settings.ThirdPersonSensitivity
                    )
                else
                    local direction = (predictedPosition - Camera.CFrame.Position).Unit
                    local newCFrame = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction)
                    Camera.CFrame = Camera.CFrame:Lerp(newCFrame, Environment.Settings.Smoothness)
                end

                Environment.FOVCircle.Color = Environment.FOVSettings.LockedColor
            end
        end
    end)

    ServiceConnections.InputBeganConnection = UserInputService.InputBegan:Connect(function(Input)
        if not Typing then
            if Input.KeyCode == Enum.KeyCode[Environment.Settings.TriggerKey] then
                if Environment.Settings.Toggle then
                    Running = not Running
                    if not Running then CancelLock() end
                else
                    Running = true
                end
            end
        end
    end)

    ServiceConnections.InputEndedConnection = UserInputService.InputEnded:Connect(function(Input)
        if not Typing and not Environment.Settings.Toggle then
            if Input.KeyCode == Enum.KeyCode[Environment.Settings.TriggerKey] then
                Running = false
                CancelLock()
            end
        end
    end)
end

Environment.Functions = {}

function Environment.Functions:Exit()
    for _, v in pairs(ServiceConnections) do
        pcall(function() v:Disconnect() end)
    end

    if Environment.FOVCircle then
        pcall(function() Environment.FOVCircle:Remove() end)
    end

    getgenv().Aimbot = nil
end

function Environment.Functions:Restart()
    for _, v in pairs(ServiceConnections) do
        pcall(function() v:Disconnect() end)
    end
    Load()
end

function Environment.Functions:ResetSettings()
    Environment.Settings = {
        Enabled = true,
        TeamCheck = false,
        AliveCheck = true,
        WallCheck = false,
        Sensitivity = 0,
        ThirdPerson = false,
        ThirdPersonSensitivity = 3,
        TriggerKey = "MouseButton2",
        Toggle = false,
        LockPart = "Head",
        PredictionVelocity = 0.165,
        Smoothness = 0.075
    }

    Environment.FOVSettings = {
        Enabled = true,
        Visible = true,
        Amount = 100,
        Color = Color3.fromRGB(255, 255, 255),
        LockedColor = Color3.fromRGB(255, 70, 70),
        Transparency = 0.5,
        Sides = 60,
        Thickness = 3,
        Filled = false
    }
end

-- Initialize variables
local Running = false
local Typing = false
local RequiredDistance = 2000

-- Load the script
Load()
