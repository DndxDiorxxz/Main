--// Aimbot with GUI & Mobile Support
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- ENV SETUP
getgenv().Aimbot = getgenv().Aimbot or {}
local Aimbot = getgenv().Aimbot

-- UI INITIALIZATION
local ScreenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
ScreenGui.Name = "AimbotUI"
ScreenGui.ResetOnSpawn = false

-- BUTTON TOGGLE (bottom right for mobile)
local ToggleBtn = Instance.new("TextButton", ScreenGui)
ToggleBtn.Size = UDim2.new(0, 100, 0, 40)
ToggleBtn.Position = UDim2.new(1, -110, 1, -50)
ToggleBtn.Text = "Toggle Aimbot"
ToggleBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
ToggleBtn.TextColor3 = Color3.new(1, 1, 1)
ToggleBtn.BorderSizePixel = 0
ToggleBtn.AutoButtonColor = true
ToggleBtn.Active = true
ToggleBtn.Draggable = true

-- GUI PANEL (top left)
local Panel = Instance.new("Frame", ScreenGui)
Panel.Size = UDim2.new(0, 250, 0, 300)
Panel.Position = UDim2.new(0, 10, 0, 10)
Panel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Panel.BorderSizePixel = 0
Panel.Visible = true
Panel.Active = true
Panel.Draggable = true

local Title = Instance.new("TextLabel", Panel)
Title.Size = UDim2.new(1, 0, 0, 30)
Title.Text = "Aimbot Settings"
Title.TextColor3 = Color3.new(1, 1, 1)
Title.BackgroundTransparency = 1
Title.TextScaled = true

-- SETTINGS TOGGLES
local function makeToggle(name, default, order, callback)
	local button = Instance.new("TextButton", Panel)
	button.Size = UDim2.new(1, -20, 0, 30)
	button.Position = UDim2.new(0, 10, 0, 35 + (order * 35))
	button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	button.TextColor3 = Color3.new(1, 1, 1)
	button.Text = name .. ": " .. (default and "ON" or "OFF")
	button.BorderSizePixel = 0

	local state = default
	button.MouseButton1Click:Connect(function()
		state = not state
		button.Text = name .. ": " .. (state and "ON" or "OFF")
		if callback then callback(state) end
	end)

	callback(default)
end

-- FOV SLIDER (input field)
local FOVBox = Instance.new("TextBox", Panel)
FOVBox.Size = UDim2.new(1, -20, 0, 30)
FOVBox.Position = UDim2.new(0, 10, 0, 220)
FOVBox.PlaceholderText = "FOV Radius (default 150)"
FOVBox.Text = ""
FOVBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
FOVBox.TextColor3 = Color3.new(1, 1, 1)
FOVBox.BorderSizePixel = 0
FOVBox.FocusLost:Connect(function()
	local num = tonumber(FOVBox.Text)
	if num then
		Aimbot.FOVSettings.Amount = num
	end
end)

-- SHOW/HIDE GUI TOGGLE
local ShowBtn = Instance.new("TextButton", ScreenGui)
ShowBtn.Size = UDim2.new(0, 80, 0, 30)
ShowBtn.Position = UDim2.new(0, 10, 1, -40)
ShowBtn.Text = "Hide Panel"
ShowBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
ShowBtn.TextColor3 = Color3.new(1, 1, 1)
ShowBtn.BorderSizePixel = 0

ShowBtn.MouseButton1Click:Connect(function()
	Panel.Visible = not Panel.Visible
	ShowBtn.Text = Panel.Visible and "Hide Panel" or "Show Panel"
end)

-- Aimbot State
local Running = false

ToggleBtn.MouseButton1Click:Connect(function()
	Running = not Running
end)

-- Settings
Aimbot.Settings = {
	Enabled = true,
	TeamCheck = false,
	AliveCheck = true,
	WallCheck = false,
	LockPart = "Head",
	PredictionVelocity = 0.12,
	Smoothness = 0.3
}

Aimbot.FOVSettings = {
	Enabled = true,
	Visible = true,
	Amount = 150,
	Color = Color3.fromRGB(255, 255, 255),
	LockedColor = Color3.fromRGB(255, 70, 70),
	Transparency = 0.5,
	Sides = 60,
	Thickness = 3,
	Filled = false
}

-- UI Toggles to Sync with Aimbot Settings
makeToggle("Enabled", true, 0, function(v) Aimbot.Settings.Enabled = v end)
makeToggle("Team Check", false, 1, function(v) Aimbot.Settings.TeamCheck = v end)
makeToggle("Alive Check", true, 2, function(v) Aimbot.Settings.AliveCheck = v end)
makeToggle("Wall Check", false, 3, function(v) Aimbot.Settings.WallCheck = v end)
makeToggle("Show FOV", true, 4, function(v) Aimbot.FOVSettings.Visible = v end)

-- FOV Drawing
Aimbot.FOVCircle = Drawing.new("Circle")

local function CancelLock()
	Aimbot.Locked = nil
	Aimbot.FOVCircle.Color = Aimbot.FOVSettings.Color
end

local function GetClosestTarget()
	local RequiredDistance = Aimbot.FOVSettings.Amount or 2000
	local mousePos = UserInputService:GetMouseLocation()
	Aimbot.Locked = nil

	for _, plr in pairs(Players:GetPlayers()) do
		if plr == LocalPlayer then continue end
		local char = plr.Character
		local part = char and char:FindFirstChild(Aimbot.Settings.LockPart)
		local hum = char and char:FindFirstChildOfClass("Humanoid")
		if not part or not hum or (Aimbot.Settings.AliveCheck and hum.Health <= 0) then continue end
		if Aimbot.Settings.TeamCheck and plr.Team == LocalPlayer.Team then continue end
		if Aimbot.Settings.WallCheck and #(Camera:GetPartsObscuringTarget({part.Position}, char:GetDescendants())) > 0 then continue end

		local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
		if not onScreen then continue end

		local dist = (Vector2(mousePos.X, mousePos.Y) - Vector2(screenPos.X, screenPos.Y)).Magnitude
		if dist < RequiredDistance then
			RequiredDistance = dist
			Aimbot.Locked = plr
		end
	end
end

-- Render loop
RunService.RenderStepped:Connect(function()
	-- FOV Circle
	local mousePos = UserInputService:GetMouseLocation()
	local circle = Aimbot.FOVCircle
	local fov = Aimbot.FOVSettings
	if fov.Enabled and Aimbot.Settings.Enabled then
		circle.Radius = fov.Amount
		circle.Thickness = fov.Thickness
		circle.Filled = fov.Filled
		circle.NumSides = fov.Sides
		circle.Color = fov.Color
		circle.Transparency = fov.Transparency
		circle.Visible = fov.Visible
		circle.Position = Vector2(mousePos.X, mousePos.Y)
	else
		circle.Visible = false
	end

	if not (Running and Aimbot.Settings.Enabled) then
		CancelLock()
		return
	end

	GetClosestTarget()

	if Aimbot.Locked and Aimbot.Locked.Character then
		local part = Aimbot.Locked.Character:FindFirstChild(Aimbot.Settings.LockPart)
		if not part then CancelLock() return end

		local velocity = part.Velocity * Aimbot.Settings.PredictionVelocity
		local predictedPos = part.Position + velocity
		local direction = (predictedPos - Camera.CFrame.Position).Unit
		local newCF = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction)
		Camera.CFrame = Camera.CFrame:Lerp(newCF, Aimbot.Settings.Smoothness)

		Aimbot.FOVCircle.Color = fov.LockedColor
	end
end)
